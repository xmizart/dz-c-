internal class Program
{
    private static void Main(string[] args)
    {
        Console.CursorVisible = false;

        ConsoleKey exitButton = ConsoleKey.Escape;

        int unitPositionX = 1;
        int unitPositionY = 1;

        char unitSymbol = '@';
        char wall = '#';

        bool isExitChosen = false;

        char[,] map = new char[,]

        {
                {wall,wall,wall,wall,wall,wall,wall,wall,wall,wall,wall,wall},
                {wall,' ',' ',' ',' ',' ',' ',wall,' ',' ',' ',wall},
                {wall,wall,wall,wall,wall,wall,' ',' ',' ',wall,' ',wall},
                {wall,' ',' ',' ',' ',' ',wall,wall,wall,wall,' ',wall},
                {wall,' ',wall,wall,wall,' ',' ',' ',' ',wall,' ',wall},
                {wall,' ',' ',' ',wall,' ',' ',' ',' ',' ',' ',wall},
                {wall,wall,wall,wall,wall,wall,wall,wall,wall,wall,wall,wall}
         };

        while (isExitChosen == false)
        {
            Console.Clear();
            DrawMap(map);
            DrawUnit(unitPositionY, unitPositionX, unitSymbol);
            ConsoleKeyInfo pressedKey = Console.ReadKey();

            if (pressedKey.Key == exitButton)
                isExitChosen = true;

            TryMoveUnit(pressedKey, ref unitPositionX, ref unitPositionY, map, wall);
        }
    }

    static void DrawUnit(int unitPositionY,int unitPositionX, char unitSymbol)
    {
        Console.SetCursorPosition(unitPositionY, unitPositionX);
        Console.Write(unitSymbol);
    }

    static void DrawMap(char[,] map)
    {
        for (int x = 0; x < map.GetLength(0); x++)
        {
            for (int y = 0; y < map.GetLength(1); y++)
            {
                Console.Write(map[x, y]);
            }

            Console.WriteLine();
        }
    }

    static void TryMoveUnit(ConsoleKeyInfo pressedKey, ref int unitPositionX, ref int unitPositionY, char[,] map, char wall)
    {
        int[] direction = GetDirection(pressedKey);
        int nextUnitPosistionX = unitPositionX + direction[0];
        int nextUnitPosistionY = unitPositionY + direction[1];

        if (map[nextUnitPosistionX, nextUnitPosistionY] != wall)
        {
            unitPositionX = nextUnitPosistionX;
            unitPositionY = nextUnitPosistionY;
        }
    }

    static int[] GetDirection(ConsoleKeyInfo pressedKey)
    {
        int[] direction = { 0, 0 };
        ConsoleKey moveUpButton = ConsoleKey.UpArrow;
        ConsoleKey moveDownButton = ConsoleKey.DownArrow;
        ConsoleKey moveLeftButton = ConsoleKey.LeftArrow;
        ConsoleKey moveRightButton = ConsoleKey.RightArrow;

        if (pressedKey.Key == moveUpButton)
            direction[0] = -1;
        else if (pressedKey.Key == moveDownButton)
            direction[0] = 1;
        else if (pressedKey.Key == moveLeftButton)
            direction[1] = -1;
        else if (pressedKey.Key == moveRightButton)
            direction[1] = 1;

        return direction;
    }
}
